var $mm = (function () {
  var parser = new DOMParser();
  var serializer = new XMLSerializer();
  var transformer = new XSLTProcessor();
  var me = {
    fileName: 'mind-map.mm',
    readOnly: false,
    scale: 1.0,
    scaleStep: 0.25,
    selectedElement: false,
    svgContainer: document.getElementById('svg-content')
  };

  function download() {
    var data = serializer.serializeToString(me.modelDom);
    var file = new Blob([data], {type: 'text/xml'});
    if (window.navigator.msSaveOrOpenBlob) // IE10+
        window.navigator.msSaveOrOpenBlob(file, me.fileName);
    else { // Others
        var a = document.createElement("a"),
                url = URL.createObjectURL(file);
        a.href = url;
        a.download = me.fileName;
        document.body.appendChild(a);
        a.click();
        setTimeout(function() {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);  
        }, 0); 
    }
  }

  function disableEdit() {
    document.querySelectorAll('.node,.node-label').forEach(function(n) {
      n.classList.remove('draggable');
    });
    document.getElementById('edit-btn').setAttribute('style', 'display:inline');
    document.getElementById('view-btn').setAttribute('style', 'display:none');
  }

  function displayContents(contents) {
    document.getElementById('raw-content').textContent = contents;
    renderSvg();
    document.querySelectorAll('.loaded-btn').forEach(function(el) {
      el.setAttribute('style','display:inline');
    });
    makeDraggable(me.svgContainer); // initialise but not enable  
    // if (me.readOnly) disableEdit();
    // else 
    enableEdit();
  }

  function drag(evt) {
    console.log('drag');
    if (me.selectedElement) {
      evt.preventDefault();
      var coord = getMousePosition(evt);
      switch (me.selectedElement.tagName) {
      case 'ellipse':
        if (evt.target.nextElementSibling != undefined
            && evt.target.nextElementSibling.tagName == 'text') {
          var dx = me.selectedElement.getAttributeNS(null, "cx")
              - evt.target.nextElementSibling.getAttributeNS(null, "x");
          var dy = me.selectedElement.getAttributeNS(null, "cy")
              - evt.target.nextElementSibling.getAttributeNS(null, "y");
//          evt.target.nextElementSibling.setAttributeNS(null, "x", coord.x);
//          evt.target.nextElementSibling.setAttributeNS(null, "y", coord.y);
          evt.target.nextElementSibling.setAttributeNS(null, "x", coord.x-dx);
          evt.target.nextElementSibling.setAttributeNS(null, "y", coord.y-dy);
        }
        me.selectedElement.setAttributeNS(null, "cx", coord.x);
        me.selectedElement.setAttributeNS(null, "cy", coord.y);
        var modelEl = me.modelDom.querySelector('[ID="'+evt.target.getAttribute('id')+'"] Bounds');
        if (modelEl != undefined) {
          modelEl.setAttribute('x', coord.x);
          modelEl.setAttribute('y', coord.y);
        }
        break;
      case 'line':
        if (evt.target.nextElementSibling != undefined
            && evt.target.nextElementSibling.tagName == 'text') {
          evt.target.nextElementSibling.setAttributeNS(null, "x", coord.x);
          evt.target.nextElementSibling.setAttributeNS(null, "y", coord.y);
        }
        me.selectedElement.setAttributeNS(null, "x1", coord.x);
        me.selectedElement.setAttributeNS(null, "y1", coord.y);
        var modelEl = me.modelDom.querySelector('[ID="'+evt.target.getAttribute('id')+'"] Bounds');
        if (modelEl != undefined) {
          modelEl.setAttribute('x', coord.x);
          modelEl.setAttribute('y', coord.y);
        }
        break;
      case 'rect':
        if (evt.target.nextElementSibling != undefined
            && evt.target.nextElementSibling.tagName == 'text') {
          // var dx = me.selectedElement.getAttributeNS(null, "x")
          //     - evt.target.nextElementSibling.getAttributeNS(null, "x");
          // var dy = me.selectedElement.getAttributeNS(null, "y")
          //     - evt.target.nextElementSibling.getAttributeNS(null, "y");
          // evt.target.nextElementSibling.setAttributeNS(null, "x", coord.x-dx);
          // evt.target.nextElementSibling.setAttributeNS(null, "y", coord.y-dy);
          evt.target.nextElementSibling.setAttributeNS(null, "x", coord.x);
          evt.target.nextElementSibling.setAttributeNS(null, "y", coord.y);
        }
        me.selectedElement.setAttributeNS(null, "x", coord.x);
        me.selectedElement.setAttributeNS(null, "y", coord.y);
        var modelEl = me.modelDom.querySelector('[ID="'+evt.target.getAttribute('id')+'"] Bounds');
        if (modelEl != undefined) {
          modelEl.setAttribute('x', coord.x);
          modelEl.setAttribute('y', coord.y);
        }
        break;
      case 'text':
        var coord = getMousePosition(evt);
        me.selectedElement.setAttributeNS(null, "x", coord.x);
        me.selectedElement.setAttributeNS(null, "y", coord.y);
        break;
      default:
        console.warn('No drag support for '+me.selectedElement.tagName);
      }
    }
  }

  function enableEdit() {
    document.querySelectorAll('.node,.node-label').forEach(function(n) {
      n.classList.add('draggable');
    });
    
    // document.getElementById('view-btn').setAttribute('style', 'display:inline');
    // document.getElementById('edit-btn').setAttribute('style', 'display:none');
  }

  function endDrag(evt) {
    console.log('endDrag');
    renderSvg();
    me.selectedElement = null;
  }
 
  function fetchRenderer() {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', 'http://localhost:8085/xslt/mm2svg.xslt');
    xhr.onload = function() {
      if (xhr.status === 200) {
        transformer.importStylesheet(xhr.responseXML);
      } else {
        console.error('Request failed.  Returned status of ' + xhr.status);
      }
    };
    xhr.send();
  }

  function getMousePosition(evt) {
    var CTM = me.svgContainer.firstElementChild.getScreenCTM();
    return {
      x: (evt.clientX - CTM.e) / CTM.a,
      y: (evt.clientY - CTM.f) / CTM.d
    };
  }

  function makeDraggable(svg) {
    svg.addEventListener('mousedown', startDrag);
    svg.addEventListener('mousemove', drag);
    svg.addEventListener('mouseup', endDrag);
    svg.addEventListener('mouseleave', endDrag);
  }

  function openFile() {
    document.getElementById('file-input').click();
  }

  function openLink(ev) {
    document.getElementById('file-input').click();
  }

  function readSingleFile(e) {
    var file = e.target.files[0];
    if (!file) {
      return;
    }
    me.fileName = file.name;
    var reader = new FileReader();
    reader.onload = function(e) {
      var contents = e.target.result;
      me.modelDom = parser.parseFromString(contents, "text/xml");
      displayContents(contents);
    };
    reader.readAsText(file);
  }

  function renderSvg() {
    transformer.clearParameters();
    var result = transformer.transformToDocument(me.modelDom);
    if (result == undefined) {
      showError("Unable to render mind map");
    } else {
      if (me.svgContainer.hasChildNodes()) me.svgContainer.removeChild(me.svgContainer.firstElementChild);
      me.svgContainer.appendChild(result.firstElementChild);
      me.svgContainer.firstElementChild.setAttribute('transform', 'scale('+me.scale+')');
    }
  }

  function showError(msg) {
    console.error(msg);
  }

  function startDrag(evt) {
    console.log('startDrag');
    if (evt.target.classList.contains('draggable')) {
      me.selectedElement = evt.target;
    }
  }

  function zoomIn() {
    console.info('zoomIn');
    me.scale += me.scaleStep;
    me.svgContainer.firstElementChild.setAttribute('transform', 'scale('+me.scale+')');
  }

  function zoomOut() {
    console.info('zoomOut');
    me.scale -= me.scaleStep;
    me.svgContainer.firstElementChild.setAttribute('transform', 'scale('+me.scale+')');
  }

  document.addEventListener('DOMContentLoaded', function(ev) {
    console.log('loading...');

    fetchRenderer();
    
    document.getElementById('file-input')
      .addEventListener('change', readSingleFile, false);
    document.getElementById('open-btn')
      .addEventListener('click', openFile, false);
    document.getElementById('save-btn')
      .addEventListener('click', download, false);
    document.getElementById('zoom-in-btn')
      .addEventListener('click', zoomIn, false);
    document.getElementById('zoom-out-btn')
      .addEventListener('click', zoomOut, false);
    // document.getElementById('edit-btn')
    //   .addEventListener('click', enableEdit, false);  
    // document.getElementById('view-btn')
    //   .addEventListener('click', disableEdit, false);
  }, false);
  
  return me;
}())


